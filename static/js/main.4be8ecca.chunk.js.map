{"version":3,"sources":["components/card/card.component.jsx","components/namesList/namesList.component.jsx","components/searchBox/searchBox.component.jsx","components/loadScreenIcon/loadScreenIcon.component.jsx","components/scroll/scroll.component.jsx","components/errorBoundary/errorBoundary.component.jsx","containers/app.container.jsx","serviceWorker.js","index.js"],"names":["Card","handleClose","setState","show","handleShow","state","this","props","name","meaning","url","transliteration","className","Modal","onHide","Body","style","display","justifyContent","width","title","height","src","frameborder","allow","allowfullscreen","onClick","id","color","React","Component","NamesList","names","map","key","uuidv4","SearchBox","searchChange","type","placeholder","onChange","LoadScreenIcon","timeout","Scroll","overflow","border","children","ErrorBoundary","hasError","error","info","console","log","App","onNameSearch","event","searchField","target","value","showContent","filterdnames","filter","toLowerCase","includes","length","fetch","then","response","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4be8ecca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\n\r\nclass Card extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            show: false\r\n        }\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState({ show: false });\r\n    }\r\n\r\n    handleShow = () => {\r\n        this.setState({ show: true });\r\n    }\r\n\r\n\r\n    render() {\r\n        const { name, meaning, url, transliteration } = this.props;\r\n        return (<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 pointer\">\r\n            <Modal show={this.state.show} onHide={this.handleClose}>\r\n                <Modal.Body style={{display:\"flex\",justifyContent:\"center\"}}>\r\n                    <iframe width=\"560\" title={transliteration} height=\"315\" src={`https://www.youtube.com/embed/${url}`} frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\r\n                </Modal.Body>\r\n            </Modal>\r\n            <div onClick={this.handleShow}>\r\n                <h2 id=\"name\" >{name}</h2>\r\n                <h3 style={{ color: \"green\" }}>{transliteration}</h3>\r\n                <strong>{meaning}</strong>\r\n            </div>\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from '../card/card.component';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//returns an array\r\nconst NamesList = ({names}) => {\r\n    return(names.map(name => {\r\n      return <Card\r\n      key={uuidv4()} \r\n      name={name.name} \r\n      meaning={name.meaning}\r\n      url={name.url}\r\n      transliteration={name.transliteration}\r\n      />;\r\n    }));\r\n}\r\n\r\nexport default NamesList;","import React, { Fragment } from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"pa2\">\r\n                <input\r\n                    className=\"pa3 ba b--green bg-lightest-blue\"\r\n                    type='search'\r\n                    placeholder='search names'\r\n                    onChange={searchChange}\r\n                />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default SearchBox;","import Loader from 'react-loader-spinner';\r\nimport React from 'react';\r\nconst LoadScreenIcon = () => {\r\n    return (\r\n        <Loader\r\n         type=\"BallTriangle\"\r\n         color=\"#00BFFF\"\r\n         height={100}\r\n         width={100}\r\n         timeout={1000000}\r\n      />\r\n    )\r\n}\r\n\r\nexport default LoadScreenIcon;\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow:'scroll', border:'1px solid black', height: '600px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            hasError : false,\r\n        }\r\n    }\r\n    //kinda like try-catch\r\n    componentDidCatch(error,info){\r\n        console.log(error);\r\n        console.log(info);\r\n        this.setState({hasError:true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Ooops! this is not good!</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport NamesList from '../components/namesList/namesList.component';\r\nimport './app.styles.css';\r\nimport SearchBox from '../components/searchBox/searchBox.component';\r\nimport LoadScreenIcon from '../components/loadScreenIcon/loadScreenIcon.component';\r\nimport Scroll from '../components/scroll/scroll.component';\r\nimport ErrorBoundary from '../components/errorBoundary/errorBoundary.component';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nexport default class App extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            names: [],\r\n            searchField:''\r\n        }\r\n    }\r\n\r\n    onNameSearch = (event) => {\r\n        this.setState({searchField : event.target.value})\r\n    }\r\n\r\n    showContent = () => {\r\n        const {names, searchField } = this.state;\r\n        const filterdnames = names.filter(name => name.transliteration.toLowerCase().includes(searchField.toLowerCase()));\r\n        return !names.length?<LoadScreenIcon/>:<NamesList names={filterdnames} />\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"tc\">\r\n                <div className=\"f1\">\r\n                <h1>Asma Ul Husna</h1>\r\n                <h6>The Most Beautiful Names</h6>\r\n                </div>\r\n                <SearchBox searchChange={this.onNameSearch}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        {this.showContent()}\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>)\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://mak947.github.io/json-files/names.json')\r\n        .then(response =>response.json())\r\n        .then(names =>{\r\n            this.setState({names: names});\r\n        });\r\n    }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from './containers/app.container';\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"tachyons\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}