{"version":3,"sources":["img/video.png","components/card/card.component.jsx","components/namesList/namesList.component.jsx","components/searchBox/searchBox.component.jsx","components/loadScreenIcon/loadScreenIcon.component.jsx","components/scroll/scroll.component.jsx","components/errorBoundary/errorBoundary.component.jsx","containers/app.container.jsx","serviceWorker.js","index.js"],"names":["module","exports","Card","handleClose","setState","show","handleShow","state","this","props","name","meaning","url","transliteration","className","Modal","onHide","Body","style","display","justifyContent","width","title","height","src","frameborder","allow","allowfullscreen","onClick","id","marginBottom","marginTop","videoIcon","alt","color","React","Component","NamesList","names","map","key","uuidv4","SearchBox","searchChange","type","placeholder","onChange","LoadScreenIcon","timeout","Scroll","overflow","children","ErrorBoundary","hasError","error","info","console","log","App","onNameSearch","event","searchField","target","value","showContent","filterdnames","filter","toLowerCase","includes","length","onNameOfTheDay","index","getIndex","nameOfday","hashCode","dateString","i","hash","charCodeAt","lessThan99","Date","toDateString","num","Math","abs","Button","variant","margin","fetch","then","response","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6ecb10de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/video.ab6501cd.png\";","import React from \"react\";\nimport './card.styles.css';\nimport Modal from 'react-bootstrap/Modal';\nimport videoIcon from '../../img/video.png';\n\nclass Card extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            show: false\n        }\n    }\n\n    handleClose = () => {\n        this.setState({ show: false });\n    }\n\n    handleShow = () => {\n        this.setState({ show: true });\n    }\n\n    render() {\n        const { name, meaning, url, transliteration } = this.props;\n        return (<div className=\"tc dib br3 pa3 ma2 grow bw2 shadow-5 pointer custom\">\n            <Modal show={this.state.show} onHide={this.handleClose}>\n                <Modal.Body style={{display:\"flex\",justifyContent:\"center\"}}>\n                    <iframe width=\"560\" title={transliteration} height=\"315\" src={`https://www.youtube.com/embed/${url}`} frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n                </Modal.Body>\n            </Modal>\n            <div onClick={this.handleShow}>\n                <h2 id=\"name\" style={{marginBottom:\"40px\",marginTop:\"70px\"}}>{name}</h2>\n                <img src={videoIcon} width=\"50px\" height=\"45px\" alt=\"\"/>\n                <h3 style={{ color: \"green\" }}>{transliteration}</h3>\n                <strong>{meaning}</strong>\n            </div>\n        </div>);\n    }\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card.component';\nimport { v4 as uuidv4 } from 'uuid';\n//returns an array\nconst NamesList = ({names}) => {\n    return(names.map(name => {\n      return <Card\n      key={uuidv4()} \n      name={name.name} \n      meaning={name.meaning}\n      url={name.url}\n      transliteration={name.transliteration}\n      />;\n    }));\n}\n\nexport default NamesList;","import React, { Fragment } from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <Fragment>\n            <div className=\"pa2\">\n                <input\n                    className=\"pa3 ba o-50\"\n                    type='search'\n                    placeholder='search names'\n                    onChange={searchChange}\n                />\n            </div>\n        </Fragment>\n    );\n}\nexport default SearchBox;","import Loader from 'react-loader-spinner';\nimport React from 'react';\nconst LoadScreenIcon = () => {\n    return (\n        <Loader\n         type=\"BallTriangle\"\n         color=\"#00BFFF\"\n         height={100}\n         width={100}\n         timeout={1000000}\n      />\n    )\n}\n\nexport default LoadScreenIcon;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow:'scroll', height: '600px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(){\n        super();\n        this.state = {\n            hasError : false,\n        }\n    }\n    //kinda like try-catch\n    componentDidCatch(error,info){\n        console.log(error);\n        console.log(info);\n        this.setState({hasError:true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Ooops! this is not good!</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport NamesList from '../components/namesList/namesList.component';\nimport './app.styles.css';\nimport SearchBox from '../components/searchBox/searchBox.component';\nimport LoadScreenIcon from '../components/loadScreenIcon/loadScreenIcon.component';\nimport Scroll from '../components/scroll/scroll.component';\nimport ErrorBoundary from '../components/errorBoundary/errorBoundary.component';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\n\nexport default class App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            names: [],\n            searchField:'',\n            nameOfday:false\n        }\n    }\n\n    onNameSearch = (event) => {\n        this.setState({searchField : event.target.value})\n    }\n\n    showContent = () => {\n        const {names, searchField } = this.state;\n        const filterdnames = names.filter(name => name.transliteration.toLowerCase().includes(searchField.toLowerCase()));\n        return !names.length?<LoadScreenIcon/>:<NamesList names={filterdnames} />\n    }\n\n    onNameOfTheDay = () =>{\n        let index = this.getIndex();\n        this.state.nameOfday\n        ?this.setState({searchField:\"\",nameOfday:false})\n        :this.setState({searchField:this.state.names[index].transliteration,nameOfday:true});\n    }\n\n    hashCode = dateString =>{\n        var hash = 0, i, chr;\n        for (i = 0; i < dateString.length; i++) {\n          chr   = dateString.charCodeAt(i);\n          hash  = ((hash << 5) - hash) + chr;\n          hash |= 0; // Convert to 32bit integer\n        }\n        return hash;\n    }\n    \n    getIndex = () =>{\n        return this.lessThan99(this.hashCode(new Date().toDateString()));\n    }\n    \n    lessThan99 = num => {\n        return Math.abs(num)%99;\n    }\n\n    render(){\n        return (\n            <div className=\"tc\">\n                <div className=\"f1\">\n                <h1>Asma Ul Husna</h1>\n                <h6>The Most Beautiful Names</h6>\n                </div>\n                <SearchBox searchChange={this.onNameSearch}/>\n                <Button variant='info' style={{margin:\"1rem\"}} className=\"grow\" onClick={this.onNameOfTheDay}>{this.state.nameOfday === false?`Name of the Day`:`Reset`}</Button>\n                <Scroll>\n                    <ErrorBoundary>\n                        {this.showContent()}\n                    </ErrorBoundary>\n                </Scroll>\n            </div>)\n    }\n\n    componentDidMount(){\n        fetch('https://maazahmadkhan.github.io/json-files/names.json')\n        .then(response =>response.json())\n        .then(names =>{\n            this.setState({names: names});\n        });\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from './containers/app.container';\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}